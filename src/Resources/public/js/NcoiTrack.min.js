"use strict";

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

var NcoiTrack = /*#__PURE__*/function () {
  function NcoiTrack($) {
    _classCallCheck(this, NcoiTrack);

    this.$ = $;
  }

  _createClass(NcoiTrack, [{
    key: "track",
    value: function track(newConsent, storageKey, localStorage, optOut) {
      var that = this;
      var userSettings = this.getDefaultUserSettings(newConsent, storageKey);

      if (newConsent === 1) {
        this.setNewUserSettings(userSettings, optOut);
      } else {
        this.setUserSettings(userSettings, localStorage);
      }

      that.makeAjax(userSettings, storageKey);
    }
  }, {
    key: "makeAjax",
    value: function makeAjax(userSettings, storageKey) {
      var $ = this.$;
      var that = this;
      console.log(userSettings);
      $.ajax({
        dataType: "json",
        type: 'POST',
        url: '/cookie/allowed',
        data: {
          data: userSettings,
          isJava: true
        },
        async: false,
        success: function success(response) {
          if (!response.success) return;
          var cookieVersion = response.cookieVersion;
          that.saveUserSettings(storageKey, JSON.stringify({
            id: response.id,
            cookieVersion: cookieVersion,
            cookieIds: userSettings.cookieIds,
            expireTime: response.expireTime,
            optOut: userSettings.optOut
          }));
          var cookiesToDelete = Cookies.get();
          var template = new NcoiTemplate($);
          var tools = response.tools;
          var body = $('body');
          var ncoiCookie = new NcoiCookie($);

          if (tools !== null) {
            tools.forEach(function (tool) {
              cookiesToDelete = ncoiCookie.unsetByTechnicalName(cookiesToDelete, tool.cookieToolsTechnicalName);
              template.addToolTemplates(tool, body);
            });
          } else {
            var templateGoogle = new _NcoiAnalyticsGoogleTemplate($);
            templateGoogle.remove();
            var templateMatomo = new _NcoiMatomoTemplate($);
            templateMatomo.remove();
          }

          var otherScripts = response.otherScripts;

          if (otherScripts !== null) {
            otherScripts.forEach(function (otherScript) {
              cookiesToDelete = ncoiCookie.unsetByTechnicalName(cookiesToDelete, otherScript.cookieToolsTechnicalName);
              template.addOtherScriptTemplate(otherScripts, body);
            });
          }

          ncoiCookie.removeCookies(cookiesToDelete);
        }
      });
    }
  }, {
    key: "getDefaultUserSettings",
    value: function getDefaultUserSettings(newConsent, storageKey) {
      var $ = this.$;
      var modId = $('[data-ncoi-mod-id]').data('ncoi-mod-id');
      return {
        id: null,
        cookieIds: [],
        modId: modId,
        newConsent: newConsent,
        storageKey: storageKey,
        cookieVersion: 0
      };
    }
  }, {
    key: "setNewUserSettings",
    value: function setNewUserSettings(userSettings, optOut) {
      var $ = this.$;
      userSettings.newConsent = true;

      if (optOut === "default") {
        userSettings.optOut = true;
      }

      var cookieSelected = $('.ncoi---table-input');
      cookieSelected.each(function () {
        var isChecked = $(this).prop('checked');
        if ($(this).data('cookie-id') && isChecked) userSettings.cookieIds.push($(this).data('cookie-id'));
      });
    }
  }, {
    key: "setUserSettings",
    value: function setUserSettings(userSettings, localStorage) {
      userSettings.optOut = "modified";
      userSettings.cookieIds = localStorage.cookieIds;
      userSettings.id = localStorage.id;
      userSettings.cookieVersion = localStorage.cookieVersion;
    }
  }, {
    key: "saveUserSettings",
    value: function saveUserSettings(storageKey, storageValue) {
      var $ = this.$;
      var ncoiApp = new NcoiApp($);
      ncoiApp.setLocalStorage(storageKey, storageValue);
    }
  }]);

  return NcoiTrack;
}();
