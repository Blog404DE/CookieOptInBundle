"use strict";

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

var NcoiCookie = /*#__PURE__*/function () {
  function NcoiCookie($) {
    _classCallCheck(this, NcoiCookie);

    this.$ = $;
  }

  _createClass(NcoiCookie, [{
    key: "ajaxDeleteCookies",
    value: function ajaxDeleteCookies(storageKey) {
      var $ = this.$;
      var ncoiApp = new NcoiApp($);
      $.ajax({
        dataType: "json",
        type: 'POST',
        url: '/cookie/delete',
        success: function success() {
          ncoiApp.setLocalStorage(storageKey, null);
        }
      });
    }
  }, {
    key: "unsetByTechnicalName",
    value: function unsetByTechnicalName(cookiesToDelete, technicalName) {
      var that = this;

      if (technicalName.indexOf(',') > -1) {
        cookiesToDelete = that.unsetManyCookiesByTechnicalName(cookiesToDelete, technicalName);
      } else {
        cookiesToDelete = that.unsetOneCookieByTechnicalName(cookiesToDelete, technicalName);
      }

      return cookiesToDelete;
    }
  }, {
    key: "unsetOneCookieByTechnicalName",
    value: function unsetOneCookieByTechnicalName(cookiesToDelete, technicalName) {
      var that = this;

      for (var cookie in cookiesToDelete) {
        if (cookiesToDelete.hasOwnProperty(cookie) && technicalName === cookie) that.unsetCookie(technicalName, cookie, cookiesToDelete);
      }

      return cookiesToDelete;
    }
  }, {
    key: "unsetManyCookiesByTechnicalName",
    value: function unsetManyCookiesByTechnicalName(cookiesToDelete, technicalName) {
      var that = this;
      var technicalNames = technicalName.split(',');
      var cookiesToDeleteIndex = 0;

      var _loop = function _loop(cookie) {
        technicalNames.forEach(function (element, index) {
          if (technicalNames[index] === cookie && cookiesToDelete.hasOwnProperty(cookie)) {
            that.unsetCookie(technicalNames[index], cookie, cookiesToDelete);
          }
        });
        cookiesToDeleteIndex++;
      };

      for (var cookie in cookiesToDelete) {
        _loop(cookie);
      }

      return cookiesToDelete;
    }
  }, {
    key: "removeCookies",
    value: function removeCookies(cookiesToDelete) {
      for (var cookie in cookiesToDelete) {
        if (cookiesToDelete.hasOwnProperty(cookie) && cookie !== 'XDEBUG_SESSION' && cookie !== 'BE_USER_AUTH' && cookie !== 'FE_USER_AUTH' && cookie !== 'BE_PAGE_OFFSET' && cookie !== 'trusted_device' && cookie !== 'csrf_contao_csrf_token' && cookie !== 'csrf_https-contao_csrf_token' && cookie !== 'PHPSESSID' && cookie !== 'contao_settings') {
          //tries all paths from root to current subpage
          var cookiePath = '',
              cookiePaths = window.location.pathname.split('/');

          while (cookiePaths.length > 0) {
            cookiePath = cookiePath + cookiePaths.shift() + '/';
            Cookies.remove(cookie, {
              path: cookiePath
            });
          }
        }
      }
    }
  }, {
    key: "unsetCookie",
    value: function unsetCookie(cookieToolsTechnicalName, cookie, cookiesToDelete) {
      if (cookieToolsTechnicalName === cookie) {
        delete cookiesToDelete[cookie];
      }
    }
  }]);

  return NcoiCookie;
}();
