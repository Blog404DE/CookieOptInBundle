"use strict";

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

var NcoiButtons = /*#__PURE__*/function () {
  function NcoiButtons($) {
    _classCallCheck(this, NcoiButtons);

    this.$ = $;
  }

  _createClass(NcoiButtons, [{
    key: "addOnClickEvents",
    value: function addOnClickEvents(storageKey, mainWrapper) {
      this.onClickSaveAllConsent(storageKey, mainWrapper);
      this.onClickSaveConsent(storageKey, mainWrapper);
      this.onClickRejectAllConsent(storageKey, mainWrapper);
    }
  }, {
    key: "onClickSaveConsent",
    value: function onClickSaveConsent(storageKey, mainWrapper) {
      var $ = this.$;
      var that = this;
      $(document).on('click', '#ncoi---allowed', function (e) {
        e.preventDefault();
        that.saveConsent(storageKey, mainWrapper, 'modified');
      });
    }
  }, {
    key: "onClickSaveAllConsent",
    value: function onClickSaveAllConsent(storageKey, mainWrapper) {
      var $ = this.$;
      var that = this;
      $(document).on('click', '#ncoi---allowed--all', function (e) {
        e.preventDefault();
        $('.ncoi---cookie-group input').prop('checked', true);
        $('.ncoi---sliding').prop('checked', true);
        that.saveConsent(storageKey, mainWrapper, 'default');
      });
    }
  }, {
    key: "onClickRejectAllConsent",
    value: function onClickRejectAllConsent(storageKey, mainWrapper) {
      var $ = this.$;
      var that = this;
      $(document).on('click', '#ncoi---reject--all', function (e) {
        e.preventDefault();
        $('.ncoi---cookie-group input').each(function () {
          if (!$(this).prop('disabled') && $(this).prop('checked')) {
            $(this).trigger('click');
          }
        });
        that.saveConsent(storageKey, mainWrapper, 'default');
      });
    }
  }, {
    key: "saveConsent",
    value: function saveConsent(storageKey, mainWrapper, optOut) {
      var $ = this.$;
      var ncoiLoad = new NcoiLoad($);
      ncoiLoad.removeAnimation(mainWrapper);
      var ncoiTrack = new NcoiTrack($);
      $('.ncoi---behind').addClass('ncoi---hidden');
      ncoiTrack.track(1, storageKey, optOut);
      var externalMedia = new NcoiExternalMedia($);
      externalMedia.decode(storageKey);
    }
  }]);

  return NcoiButtons;
}();
