"use strict";

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

var NcoiTemplate = /*#__PURE__*/function () {
  function NcoiTemplate($) {
    _classCallCheck(this, NcoiTemplate);

    this.$ = $;
  }

  _createClass(NcoiTemplate, [{
    key: "addToolTemplates",
    value: function addToolTemplates(tool, body) {
      var template = this.getChildTemplate(this.getToolsType(tool));
      if (typeof template !== 'undefined') template.setCookies(tool, body);
    }
  }, {
    key: "addOtherScriptTemplate",
    value: function addOtherScriptTemplate(otherScripts, body) {
      otherScripts.forEach(function (otherScript) {
        body.append(otherScript.cookieToolsCode);
      });
    }
  }, {
    key: "getTrackingId",
    value: function getTrackingId(tool) {
      return tool.cookieToolsTrackingID;
    }
  }, {
    key: "getUrl",
    value: function getUrl(tool) {
      var url = tool.cookieToolsTrackingServerUrl;
      if (url.slice(-1) !== '/') url += '/';
      return url;
    }
  }, {
    key: "getToolsType",
    value: function getToolsType(tool) {
      return tool.cookieToolsSelect;
    }
  }, {
    key: "getWrapper",
    value: function getWrapper(template) {
      var wrapper = template.getWrapper();
      if (wrapper.length > 0) return template.getWrapper();
      return null;
    }
  }, {
    key: "getChildTemplate",
    value: function getChildTemplate(toolType) {
      var template;

      if (toolType.localeCompare('googleAnalytics') === 0) {
        template = new _NcoiAnalyticsGoogleTemplate(this.$);
      } else if (toolType.localeCompare('googleTagManager') === 0) {
        template = new _NcoiTagManagerGoogleTemplate();
      } else if (toolType.localeCompare('facebookPixel') === 0) {
        template = new _NcoiFacebookPixelTemplate(this.$);
      } else if (toolType.localeCompare('matomo') === 0) {
        template = new _NcoiMatomoTemplate(this.$);
      }

      return template;
    }
  }]);

  return NcoiTemplate;
}();
